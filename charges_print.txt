mastermind.py :
J'ai créé un module "mastermind.py" contenant une classe "Mastermind" elle-même contenant des méthodes, puis je l'ai importé pour que les méthodes soient utilisables par mon programme principal "app.py".
La méthode de la classe "Mastermind" qui vérifie si le joueur a un nombre bien placé ou non est "check_guess(guess)". Cette méthode compare la proposition du joueur à la combinaison secrète et calcule le nombre de jetons rouges et blancs correspondant à la proposition. Les jetons rouges correspondent aux nombres corrects et bien placés, tandis que les jetons blancs correspondent aux nombres corrects mais mal placés.
Les lignes précises qui s'occupent de cela sont respectivement :

# Trouvé bien placé : red_pins = sum(a == b for a, b in zip(secret_code_copy, guess_copy))
Explications : La ligne calcule donc le nombre de jetons rouges correspondant à la proposition du joueur. Pour cela, elle utilise la fonction built-in zip() qui prend en entrée deux listes, ici secret_code_copy et guess_copy, et renvoie un générateur qui crée des tuples à partir des éléments de ces deux listes. Les éléments des tuples sont alors comparés deux à deux à l'aide d'une compréhension de liste avec la syntaxe a == b for a, b in .... Cette compréhension de liste renvoie une liste de booléens, où True correspond à un élément de la proposition bien placé et False sinon. La fonction sum() prend ensuite cette liste de booléens et renvoie la somme des True, c'est-à-dire le nombre de jetons rouges.

# Trouvé mal placé : white_pins = sum(min(secret_code_copy.count(col), guess_copy.count(col)) for col in range(1, 5)) - red_pins
Explications : La ligne calcule le nombre de jetons blancs correspondant à la proposition du joueur. Elle utilise une autre compréhension de liste qui parcourt les nombres de 1 à 4 (for col in range(1, 5)) et calcule le nombre minimal de fois où chaque nombre apparaît dans les deux listes (min(secret_code_copy.count(col), guess_copy.count(col))). Ce nombre correspond au nombre de jetons blancs pour ce nombre. La fonction sum() prend ensuite la liste de ces nombres et renvoie leur somme totale. Cependant, certains de ces nombres peuvent avoir été comptés à tort comme des jetons rouges, c'est pourquoi on soustrait le nombre de jetons rouges déjà comptés (red_pins).